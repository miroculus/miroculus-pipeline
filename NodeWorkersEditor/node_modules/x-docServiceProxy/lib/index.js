var Q = require("q");
var async = require('async');
var request = require('request');
var moment = require("moment");

var log = require("x-log");
var config = require("x-config");
var db = require('x-db');

var service = require('./ncbiService.js');

var MAX_RESULTS = 10000;

function getDocumentContent(docId, source, cb) {
    return service.fetchContent(source, docId, cb);
}

function getDocumentSentences(docId, source, cb) {
    
    var urlRequest = config.services.docServiceUrl + '/doc/' + source + '/' + docId;
    
    console.info(urlRequest);
    request(urlRequest, function (err, resp, body) {
        
        if (err) return cb(err);
        
        var sentencesArray;
        try {
            sentencesArray = JSON.parse(body);
        } catch (e) {
            console.error('error parsing sentences to JSON', body, e);
            return cb(e);
        }
        
        if (!sentencesArray || !sentencesArray.sentences || !Array.isArray(sentencesArray.sentences))
          return cb(new Error('Returned JSON is not an array'));
        
        return cb(null, sentencesArray);
    });
}

function checkDocuments(docIds, callback) {
    
    var reqParams = { docs: docIds };
    db.getUnprocessedDocuments(reqParams, function (err, result) {
        if (err) {
            console.error(err);
            return callback(err);
        }
        callback(null, result.docs);
    });
}

function getPapers(dateFrom, dateTo, callback) {
    var pdaTimeSpan = moment(dateFrom).format('"YYYY/MM/DD"') + '[EDAT] : ' + moment(dateTo).format('"YYYY/MM/DD"') + '[EDAT]';
    var allDocuments = { documents: [] };
    
    function runSearchRequest(database, startIndex, callback) {
        
        // Request Ids for specified page
        service.searchRequest(database, [pdaTimeSpan], MAX_RESULTS, startIndex, service.etypes.edat, -1, function (err, res, cache) {
            
            console.info('results return from db %s on dates %s', cache.database, pdaTimeSpan);
            
            if (err) {
                console.error(err);
                return callback(err);
            }
            
            // insert current result batch into array
            var sourceId = service.getDBId(cache.database);
            var documents = res.idlist.map(function (docId) {
                return {
                    sourceId: sourceId,
                    docId: docId + ''
                };
            });
            console.info('db %s on dates %s with result count %s', cache.database, pdaTimeSpan, documents.length);
            allDocuments.documents = allDocuments.documents.concat(documents);
            
            // We have more than one page and this is the first page
            var totalCount = parseInt(res.sount);
            var pageCount = parseInt(res.retmax);
            if (startIndex == 0 && pageCount < totalCount) {
                // Prepare start index for each page
                var pageStartIndexes = [];
                for (var i = pageCount; i < totalCount; i += MAX_RESULTS) {
                    pageStartIndexes.push(i);
                }
                
                // Request ids for each page start index 
                return async.each(pageStartIndexes, function (pageStartIndex, callback) {
                    return runSearchRequest(database, pageStartIndex, callback);
                }, callback);
            }
            
            return callback();
        });
    }
    
    console.info("Searching for documents in " + pdaTimeSpan);
    
    // Calling get documents from both pmc and pubmed dbs
    return async.parallel([
        function (callback) {
            return runSearchRequest(service.dbs.pmc, 0, callback);
        }/*,
          * // For now, not querying pubmed db
        function (callback) {
            return runSearchRequest(service.dbs.pubmed, 0, callback);
        }*/
    ], function (err) {
        
        if (err) {
            console.error('Completed retrieving db new ids. There was a problem scanning the %s\nError:\n%s', pdaTimeSpan, err);
            return callback(err);
        }
        
        console.info('Completed retrieving db new ids on date span %s. Filtering only new ids...', pdaTimeSpan);
        
        return checkDocuments(allDocuments.documents, function (err, documents) {
            if (err) {
                console.error(err);
                return callback(err);
            }
            
            console.info('filtered %s documents', documents.length);
            return callback(null, documents);
        });
    });
}

module.exports = {
    getDocumentContent: getDocumentContent,
    getDocumentSentences: getDocumentSentences,
    getPapers: getPapers
};